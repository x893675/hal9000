{
  "swagger": "2.0",
  "info": {
    "title": "GRPC TEST Project",
    "version": "0.0.1",
    "contact": {
      "name": "TEST Project",
      "url": "http://example.com"
    }
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/capi/iam.io/v1/users": {
      "get": {
        "summary": "Get users, filter with fields(user_id, email, phone_number, status), default return all users",
        "operationId": "DescribeUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/hal9000DescribeUsersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "search_word",
            "description": "query key, support these fields(user_id, email, phone_number, status).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort_key",
            "description": "sort key, order by sort_key, default create_time.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "reverse",
            "description": "value = 0 sort ASC, value = 1 sort DESC.",
            "in": "query",
            "required": false,
            "type": "boolean",
            "format": "boolean"
          },
          {
            "name": "limit",
            "description": "data limit, default 20, max 200.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "data offset, default 0.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "root_group_id",
            "description": "use root group ids to get all group ids.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "group_id",
            "description": "group ids.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "user_id",
            "description": "user ids.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "description": "status eg.[active|deleted].",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "role_id",
            "description": "role ids.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "username",
            "description": "username.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "email",
            "description": "email, eg.op@yunify.com.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "phone_number",
            "description": "phone number, string of 11 digital.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Account"
        ]
      }
    },
    "/capi/iam.io/v1/auth/token": {
      "post": {
        "summary": "Get auth token",
        "operationId": "GetAuthToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/hal9000Token"
            }
          },
          "500": {
            "description": "Returned when the server unexpected error occurred.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/hal9000AuthRequest"
            }
          }
        ],
        "tags": [
          "auth"
        ],
        "security": []
      }
    },
    "/capi/iam.io/v1/oauth2/token": {
      "post": {
        "summary": "Get Oauth token",
        "operationId": "GetOauthToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/hal9000Token"
            }
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "$ref": ".google.rpc.Status"
            }
          },
          "500": {
            "description": "Returned when the server unexpected error occurred.",
            "schema": {
              "format": "string"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/hal9000Oauth2Request"
            }
          }
        ],
        "tags": [
          "auth"
        ],
        "security": []
      }
    }
  },
  "definitions": {
    "hal9000DescribeUsersResponse": {
      "type": "object",
      "properties": {
        "total_count": {
          "type": "integer",
          "format": "int64",
          "title": "total count of qualified user"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/hal9000User"
          },
          "title": "list of user"
        }
      }
    },
    "hal9000User": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string",
          "default": "111",
          "description": "user id",
          "title": "user id, user belong to different group and role, has different permissions",
          "required": [
            "string_value"
          ]
        },
        "username": {
          "type": "string",
          "title": "user name"
        },
        "email": {
          "type": "string",
          "title": "user email"
        },
        "phone_number": {
          "type": "string",
          "title": "user phone number"
        },
        "description": {
          "type": "string",
          "title": "user description"
        },
        "creator": {
          "type": "string",
          "title": "user creator"
        },
        "status": {
          "type": "integer",
          "format": "int32",
          "title": "user status eg.[0|1]"
        },
        "create_time": {
          "type": "string",
          "format": "date-time",
          "title": "the time when user create"
        },
        "update_time": {
          "type": "string",
          "format": "date-time",
          "title": "the time when user update"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/hal9000UserRole"
          },
          "title": "user roles"
        }
      }
    },
    "hal9000UserRole": {
      "type": "object",
      "properties": {
        "role_name": {
          "type": "string",
          "title": "user role name"
        }
      }
    },
    "hal9000AuthRequest": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string",
          "title": "required, user's name"
        },
        "password": {
          "type": "string",
          "title": "required, user's password"
        }
      }
    },
    "hal9000Oauth2Request": {
      "type": "object",
      "properties": {
        "grant_type": {
          "type": "string",
          "title": "required, type of client request verification.eg.[client_credentials or password or refresh_token]"
        },
        "client_id": {
          "type": "string",
          "title": "required, client id"
        },
        "client_secret": {
          "type": "string",
          "title": "required, used for validate client credentials"
        },
        "scope": {
          "type": "string",
          "title": "scope"
        },
        "username": {
          "type": "string",
          "title": "required or not depend on grant_type, user's name"
        },
        "password": {
          "type": "string",
          "title": "required or not depend on grant_type, user's password"
        },
        "refresh_token": {
          "type": "string",
          "title": "required or not depend on grant_type, refresh token to check whether token expired"
        }
      }
    },
    "hal9000Token": {
      "type": "object",
      "properties": {
        "token_type": {
          "type": "string",
          "title": "token type.eg.[bearer]"
        },
        "expires_in": {
          "type": "integer",
          "format": "int32",
          "title": "default 2h"
        },
        "access_token": {
          "type": "string",
          "title": "access token, generator by jwt(key=secrete key)"
        },
        "refresh_token": {
          "type": "string",
          "title": "refresh token, timeliness,default expired after 2 weeks"
        },
        "id_token": {
          "type": "string",
          "title": "id token, generator by jwt(key=\"\")"
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "type": "apiKey",
      "description": "The Authorization header must be set to Bearer followed by a space and a token. For example, 'Bearer vHUabiBEIKi8n1RdvWOjGFulGSM6zunb'.",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}
